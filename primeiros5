import java.io.File;
import java.io.FileNotFoundException;
import java.util.Formatter;
import java.util.Scanner;

public class ProjetoIsepAPROG {

    private final static int MAX_PARTICIPANTES = 30;
    private final static int N_CAMPOS_INFO = 4;
    private final static int N_JOGOS = 6;
    private final static int MAX_LINHAS_PAGINA = 3;
    private final static String SEPARADOR_DADOS_FICH = ";";

    Scanner in = new Scanner(System.in);

    public static void main(String[] args) throws FileNotFoundException {
        Scanner in = new Scanner(System.in);
        String[] jogos = new String[N_JOGOS];
        String[][] participantes = new String[MAX_PARTICIPANTES][N_CAMPOS_INFO];
        int nParticipantes = 0;
        double[][] prémios = new double[MAX_PARTICIPANTES][N_JOGOS];
        int op;
        do {
            op = menu();
            switch (op) {
                case 1:
                    System.out.println("Qual a data do evento (AAAAMMDD)?");
                    String nomeFich = in.nextLine();
                    if (carregarJogosDoEvento(nomeFich + ".txt", jogos)) {
                        System.out.println("Jogos carregados com sucesso");
                    } else {
                        System.out.println("Erro no carregamento dos jogos. Verifique ficheiro");
                    }
                    break;
                case 2:
                    visualizarInfoJogos(jogos);

                    break;
                case 3:
                    System.out.println("Escreva o nome do ficheiro com a informação da sua equipa");
                    String infoFich = in.next();
                    nParticipantes = lerInfoFicheiro(infoFich + ".txt", participantes, nParticipantes);

// …
                    break;
                case 4:
                    listagemPaginada(participantes, nParticipantes);
                    break;

                case 5:
                    System.out.println("Introduza o Email do participante que prentede alterar os dados");
                    String eMail = in.next();
                    actualizarInfoParticipante(eMail, participantes, nParticipantes);
                    break;
                case 6:
                    System.out.println("Introduza o nome do ficheiro com os resultados dos jogos");
                    String resulFich = in.next();
                    lerInfoResultados(resulFich, jogos);

                case 0:
                    System.out.println(
                            "Já fez todas as gravações necessárias? Confirma terminar(s/n)?");
                    char resp = (in.next()).charAt(0);
                    if (resp != 's' && resp != 'S') {
                        op = 1;
                    }
                    break;
                default:
                    System.out.println("Opção incorreta. Repita");
                    break;
            }
        } while (op != 0);
    }

    /**
     * menu do projeto*
     */
    public static int menu() {
        Scanner ler = new Scanner(System.in);
        String texto = "1-CARREGAR UM FICHEIRO COM A INFORMAÇÃO DOS JOGOS DO EVENTO"
                + "\n2-INFORMAÇÃO DOS JOGOS"
                + "\n3-ADICONAR UMA EQUIPA"
                + "\n4-VER INFORMAÇÃO DA EQUIPA"
                + "\n5-ATUALIZAR INFORMAÇÃO DE UM PARTICIPANTE";
        System.out.println(texto);
        System.out.println("\nSelecione uma opção: ");
        int op = ler.nextInt();
        return op;
    }

//                                    RESPOSTA 1
    private static boolean carregarJogosDoEvento(String nomeFichJogos, String[] jogos)
            throws FileNotFoundException {
        Scanner fInput = new Scanner(new File(nomeFichJogos));
        int i = 0;
        while (fInput.hasNextLine() && i < N_JOGOS) {
            String linha = fInput.nextLine();
// Verifica se linha não está em branco
            if ((linha.trim()).length() > 0) {
                jogos[i] = linha;
                i++;
            }
        }
        fInput.close();
        if (i == N_JOGOS) {
            return true;
        }
        return false;
    }

//                                RESPOSTA 2
// Dá informação sobre o ID do jogo, o tipo de jogo e os pontos máximos. 
    private static void visualizarInfoJogos(String[] jogos) {
        System.out.println("Jogos do evento");
        System.out.printf("%15s%15s%18s%n",
                "ID do jogo", "Tipo de jogo", "Max. de pontos");
        for (int i = 0; i < jogos.length; i++) {
            String[] temp = jogos[i].split("-");
            System.out.printf("%15s%15s%15s%n", temp[0], temp[1], temp[2]);
        }
    }

    //                           RESPOSTA 3
    /**
     * * Carrega informação do ficheiro de texto para memória
     *
     * @param nomeFich - nome do ficheiro que contem a informação dos
     * participantes
     * @param info - matriz de strings para guardar a informação dos
     * participantes
     * @param nElems - número de elementos já existentes na matriz
     * @return o número final de elementos na matriz
     */
    public static int lerInfoFicheiro(String nomeFich, String[][] info, int nElems) throws
            FileNotFoundException {
        Scanner fInput = new Scanner(new File(nomeFich));
        int nElemsInic = nElems;
        while (fInput.hasNext() && nElems < MAX_PARTICIPANTES) {
            String linha = fInput.nextLine();
// Verifica se linha não está em branco
            if (linha.trim().length() > 0) {
                nElems = guardarDados(linha, info, nElems);
            }
        }
        fInput.close();
        if (nElems - nElemsInic != 3) {
            nElems = nElemsInic;
        }
        return nElems;
    }

    /**
     * Acede à informação de uma linha do ficheiro e guarda-a na estrutura dados
     * se ainda não existir linha com aquele valor no 1º elemento
     *
     * @param linha - String com o conteúdo de uma linha do ficheiro
     * @param info - matriz de strings com a informação lida do ficheiro
     * @param nElems - número de elementos existentes na matriz
     * @return - o novo número de elementos da matriz
     */
    private static int guardarDados(String linha, String[][] info, int nElems) {
        String[] temp = linha.split(SEPARADOR_DADOS_FICH);
        if (temp.length == N_CAMPOS_INFO) {
            String num = temp[0].trim();
            int pos = pesquisarElemento(num, nElems, info);
            if (pos == -1) {
                for (int i = 0; i < N_CAMPOS_INFO; i++) {
                    info[nElems][i] = temp[i].trim();
                }
                nElems++;
            }
        }
        return nElems;
    }

    /**
     * Pesquisar linha de matriz por primeiro elemento da linha
     *
     * @param valor - elemento a pesquisar
     * @param nEl - nº de elementos da matriz
     * @param matriz - matriz com a informação
     * @return -1 se não existe linha com esse valor ou o nº da linha cujo
     * primeiro elemento é esse valor
     */
    public static int pesquisarElemento(String valor, int nEl, String[][] mat) {
        for (int i = 0; i < nEl; i++) {
            if (mat[i][0].equals(valor)) {
                return i;
            }
        }
        return -1;
    }

    //                           RESPOSTA 4
    /**
     * Visualizar toda a informação ( paginada)dos participantes existente em
     * memória
     *
     * @param matriz- matriz com a informação a listar
     * @param nEl – nº de linhas com informação
     */
    private static void listagemPaginada(String[][] matriz, int nEl) {
        Scanner in = new Scanner(System.in);
        int contPaginas = 0;
        for (int i = 0; i < nEl; i++) {
            if (i % MAX_LINHAS_PAGINA == 0) {
                if (contPaginas > 0) {
                    System.out.println("\nPara continuar digite ENTER\n");
                    in.nextLine();
                }

                contPaginas++;
                System.out.println("\nPÁGINA: " + contPaginas);
                System.out.printf("%56s%n", "PARTICIPANTES");
                System.out.printf("%75s%n", "==================================================");
            }

            for (int j = 0; j < N_CAMPOS_INFO; j++) {
                if (j == 1) {
                    System.out.printf("%30s", matriz[i][j]);
                } else {
                    System.out.printf("%10s", matriz[i][j]);
                }
            }
            System.out.println("");
        }
        System.out.println("\nPara continuar digite ENTER\n");
        in.nextLine();
    }

    public static boolean actualizarInfoParticipante(String eMail, String[][] matriz, int nElems) {
        Scanner in = new Scanner(System.in);
        int pos;
        if ((pos = pesquisarElemento(eMail, nElems, matriz)) > -1) {
            int op;
            do {
                Formatter out = new Formatter(System.out);
                mostrarParticipante(out, matriz[pos]);
                op = menuInfoParticipante();
                switch (op) {
                    case 1:
                        System.out.println("Novo EMail:");
                        matriz[pos][0] = in.nextLine();
                        break;

                    case 2:
                        System.out.println("Novo nome:");
                        matriz[pos][1] = in.nextLine();
                        break;
                    case 3:
                        System.out.println("Nova data nascimento:");
                        matriz[pos][2] = in.nextLine();
                        break;
                    case 0:
                        System.out.println("FIM");
                        break;
                    default:
                        System.out.println("Opção incorreta");
                        break;
                }
            } while (op != 0);
            return true;
        }
        System.out.printf("O participante %s não foi encontrado!", eMail);
        return false;

    }

    private static void mostrarParticipante(Formatter out, String[] participante) {
        for (int j = 0; j < N_CAMPOS_INFO; j++) {
            if (j == 1) {
                out.format("%30s;", participante[j]);
            } else {
                out.format("%12s;", participante[j]);
            }
        }
    }

    private static int menuInfoParticipante() {
        Scanner in = new Scanner(System.in);
        String texto = "ATUALIZAR INFORMAÇÃO DE PARTICIPANTE"
                + "\n EMail ... 1"
                + "\n NOME ... 2"
                + "\n DATA NASCIMENTO ... 3"
                + "\n TERMINAR ... 0"
                + "\n\nQUAL A SUA OPÇÃO?";
        System.out.printf("%n%s%n", texto);
        int op = in.nextInt();
        in.nextLine();
        return op;
    }

    private static int lerInfoResultados(String nomeFich, String[] jogos) throws
            FileNotFoundException {

        String[] temp = nomeFich.split("_");
        String numeroDoJogo = temp[1];
        String pontuacaoMax = procurarNumeroJogo(numeroDoJogo, jogos);
        int pontMax = Integer.parseInt(pontuacaoMax);
        System.out.println(pontMax);

        Scanner fInput = new Scanner(new File(nomeFich + "txt"));

        while (fInput.hasNext()) {
            String linha = fInput.nextLine();

// Verifica se linha não está em branco
            if (linha.trim().length() > 0) {
                nElems = guardarInfoResultados(linha, info, nElems);
            }
        }
        fInput.close();

    }

    private static String procurarNumeroJogo(String numeroDoJogo, String[] jogos) {
        for (int i = 0; i < jogos.length; i++) {
            String[] temp = jogos[i].split("-");
            if (temp[0] == numeroDoJogo) {
                return temp[3]; 
            }

        }
        return "n";
    }
